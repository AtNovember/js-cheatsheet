// функции и функциональные выражения

// в чем разница между функциями и ф-циональными выражениями?
// а в чем особенности стрелочных функций?


=========

function count() {
  // переменные i,j не будут уничтожены по окончании цикла
  for (var i = 0; i < 3; i++) {
    var j = i * 2;
  }

  alert( i ); // i=3, последнее значение i, при нём цикл перестал работать
  alert( j ); // j=4, последнее значение j, которое вычислил цикл
}

подробнее: https://learn.javascript.ru/closures

а еще умные слова по теме: 
LexicalEnvironment


var phrase = 'Привет';

function sayHi(name) {
  alert(phrase + ', ' + name);
}

sayHi('Вася');  // Привет, Вася (*)
phrase = 'Пока';
sayHi('Вася'); // Пока, Вася (**) 

// это все из-за [[Scope]]

[[Scope]] - это скрытое свойство, которое получает функция при создании. содержит ссылки на переменные из внешнего окружения функции



https://learn.javascript.ru/function-basics



Возврат функции? Что это для чего?

function makeCounter() {
  var currentCount = 1;

  return function() { // (**)
    return currentCount++;
  };
}

markup: https://learn.javascript.ru/closures#vozvrat-funktsii



===============
Замыкание – это функция вместе со всеми внешними переменными, которые ей доступны.
Обычно, говоря «замыкание функции», подразумевают не саму эту функцию, а именно внешние переменные.

1. Все переменные и параметры функций являются свойствами объекта переменных LexicalEnvironment. Каждый запуск функции создает новый такой объект. На верхнем уровне им является «глобальный объект», в браузере – window.

2. При создании функция получает системное свойство [[Scope]], которое ссылается на LexicalEnvironment, в котором она была создана.

3. При вызове функции, куда бы её ни передали в коде – она будет искать переменные сначала у себя, а затем во внешних LexicalEnvironment с места своего «рождения».
